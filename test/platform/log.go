// Code generated by MockGen. DO NOT EDIT.
// Source: internal/platform/repositories/log.go

// Package log is a generated GoMock package.
package log

import (
	entity "notification/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLog is a mock of Log interface.
type MockLog struct {
	ctrl     *gomock.Controller
	recorder *MockLogMockRecorder
}

// MockLogMockRecorder is the mock recorder for MockLog.
type MockLogMockRecorder struct {
	mock *MockLog
}

// NewMockLog creates a new mock instance.
func NewMockLog(ctrl *gomock.Controller) *MockLog {
	mock := &MockLog{ctrl: ctrl}
	mock.recorder = &MockLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLog) EXPECT() *MockLogMockRecorder {
	return m.recorder
}

// DeleteLogs mocks base method.
func (m *MockLog) DeleteLogs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogs")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogs indicates an expected call of DeleteLogs.
func (mr *MockLogMockRecorder) DeleteLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogs", reflect.TypeOf((*MockLog)(nil).DeleteLogs))
}

// GetLogs mocks base method.
func (m *MockLog) GetLogs() ([]entity.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]entity.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockLogMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockLog)(nil).GetLogs))
}

// SaveLog mocks base method.
func (m *MockLog) SaveLog(log entity.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLog", log)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLog indicates an expected call of SaveLog.
func (mr *MockLogMockRecorder) SaveLog(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLog", reflect.TypeOf((*MockLog)(nil).SaveLog), log)
}
